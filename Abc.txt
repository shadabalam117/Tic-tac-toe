import React, { useEffect, useMemo, useRef, useState } from "react";
import { Canvas, useFrame } from "@react-three/fiber";
import { motion, AnimatePresence } from "framer-motion";

// Soft error boundary to isolate 3D issues and keep the app running
class SoftErrorBoundary extends React.Component {
  constructor(props) { super(props); this.state = { hasError: false }; }
  static getDerivedStateFromError() { return { hasError: true }; }
  componentDidCatch(e) { console.error("3D error:", e); }
  render() { return this.state.hasError ? null : this.props.children; }
}

/**
 * Tic-Tac-Toe: Beyond the Grid — single-file React app (fixed)
 * - Framer Motion animations
 * - 3D background via @react-three/fiber (rotating torus + stars)
 * - Local 2P + CPU (Minimax) with difficulty
 * - Undo / Hint / Stats (LocalStorage)
 * - Responsive + accessible
 */

// ---------- Utilities ----------
const THEMES = {
  aurora: {
    name: "Aurora",
    bg: "from-indigo-900 via-purple-900 to-slate-900",
    card: "bg-white/10 backdrop-blur-xl border-white/10",
    accent: "from-fuchsia-500 to-sky-400",
  },
  neo: {
    name: "Neo Mint",
    bg: "from-emerald-900 via-teal-900 to-slate-900",
    card: "bg-white/10 backdrop-blur-xl border-white/10",
    accent: "from-emerald-400 to-cyan-300",
  },
  lava: {
    name: "Lava",
    bg: "from-rose-900 via-orange-900 to-stone-900",
    card: "bg-white/10 backdrop-blur-xl border-white/10",
    accent: "from-orange-400 to-pink-500",
  },
  mono: {
    name: "Monochrome",
    bg: "from-zinc-900 via-neutral-900 to-black",
    card: "bg-white/10 backdrop-blur-xl border-white/10",
    accent: "from-white to-zinc-400",
  },
};

const LOCAL_KEYS = {
  stats: "t3_masterpiece_stats_v1",
  prefs: "t3_masterpiece_prefs_v1",
};

const initialStats = { xWins: 0, oWins: 0, draws: 0, games: 0, streak: 0, bestTimeMs: null };

function useLocalState(key, defaultValue) {
  const [state, setState] = useState(() => {
    try {
      const raw = localStorage.getItem(key);
      return raw ? JSON.parse(raw) : defaultValue;
    } catch {
      return defaultValue;
    }
  });
  useEffect(() => {
    try {
      localStorage.setItem(key, JSON.stringify(state));
    } catch {}
  }, [key, state]);
  return [state, setState];
}

// ---------- Web Audio: tiny synth for clicks/wins ----------
function useSound() {
  const ctxRef = useRef(null);
  const ensureCtx = () => {
    if (!ctxRef.current) ctxRef.current = new (window.AudioContext || window.webkitAudioContext)();
    return ctxRef.current;
  };
  const beep = (freq = 660, dur = 0.08, type = "sine", gain = 0.04) => {
    const ctx = ensureCtx();
    const o = ctx.createOscillator();
    const g = ctx.createGain();
    o.type = type;
    o.frequency.value = freq;
    g.gain.value = gain;
    o.connect(g);
    g.connect(ctx.destination);
    o.start();
    o.stop(ctx.currentTime + dur);
  };
  const chord = (arr = [523, 659, 783], dur = 0.25) => {
    const ctx = ensureCtx();
    const master = ctx.createGain();
    master.gain.value = 0.05;
    master.connect(ctx.destination);
    arr.forEach((f) => {
      const o = ctx.createOscillator();
      o.type = "triangle";
      o.frequency.value = f;
      o.connect(master);
      o.start();
      o.stop(ctx.currentTime + dur);
    });
  };
  return { beep, chord };
}

// ---------- Game Logic ----------
const LINES_3 = [
  [0, 1, 2],
  [3, 4, 5],
  [6, 7, 8],
  [0, 3, 6],
  [1, 4, 7],
  [2, 5, 8],
  [0, 4, 8],
  [2, 4, 6],
];

function calcWinner(board) {
  for (const [a, b, c] of LINES_3) {
    if (board[a] && board[a] === board[b] && board[a] === board[c]) return { winner: board[a], line: [a, b, c] };
  }
  if (board.every(Boolean)) return { winner: null, line: null, draw: true };
  return null;
}

function minimax(board, isMax, player, opponent, depth = 0) {
  const res = calcWinner(board);
  if (res?.winner === player) return 10 - depth;
  if (res?.winner === opponent) return depth - 10;
  if (res?.draw) return 0;

  const scores = [];
  for (let i = 0; i < 9; i++) {
    if (!board[i]) {
      board[i] = isMax ? player : opponent;
      const score = minimax(board, !isMax, player, opponent, depth + 1);
      scores.push(score);
      board[i] = null;
    }
  }
  return isMax ? Math.max(...scores) : Math.min(...scores);
}

function bestMove(board, ai, human, difficulty) {
  const empties = board.map((v, i) => (v ? null : i)).filter((v) => v !== null);
  if (difficulty === "easy") return empties[Math.floor(Math.random() * empties.length)];

  if (difficulty === "medium") {
    for (const i of empties) {
      board[i] = ai;
      if (calcWinner(board)?.winner === ai) {
        board[i] = null;
        return i;
      }
      board[i] = null;
    }
    for (const i of empties) {
      board[i] = human;
      if (calcWinner(board)?.winner === human) {
        board[i] = null;
        return i;
      }
      board[i] = null;
    }
    if (empties.includes(4) && Math.random() < 0.6) return 4;
    return empties[Math.floor(Math.random() * empties.length)];
  }

  let bestScore = -Infinity;
  let move = empties[0];
  for (const i of empties) {
    board[i] = ai;
    const score = minimax(board, false, ai, human);
    board[i] = null;
    if (score > bestScore) {
      bestScore = score;
      move = i;
    }
  }
  return move;
}

// ---------- 3D Scene ----------
function TorusKnot() {
  const ref = useRef();
  useEffect(() => {
    if (!ref.current) return;
    ref.current.rotation.x = Math.PI / 4;
  }, []);
  useFrame(() => {
    if (!ref.current) return;
    ref.current.rotation.y += 0.003;
  });
  return (
    <mesh ref={ref} position={[0, 0, 0]}>
      <torusKnotGeometry args={[1.1, 0.35, 128, 32]} />
      <meshStandardMaterial metalness={0.6} roughness={0.2} envMapIntensity={1} color="white" />
    </mesh>
  );
}

// ---------- Main Component ----------
export default function TicTacToeMasterpiece() {
  const { beep, chord } = useSound();
  const [themeKey, setThemeKey] = useLocalState(LOCAL_KEYS.prefs, { theme: "aurora" });
  const theme = THEMES[themeKey.theme] ?? THEMES.aurora;

  const [board, setBoard] = useState(Array(9).fill(null));
  const [xIsNext, setXIsNext] = useState(true);
  const [mode, setMode] = useState("cpu"); // "cpu" | "local"
  const [difficulty, setDifficulty] = useState("impossible"); // easy | medium | impossible
  const [history, setHistory] = useState([]); // for undo
  const [stats, setStats] = useLocalState(LOCAL_KEYS.stats, initialStats);
  const [startTs, setStartTs] = useState(() => Date.now());
  const [hintIndex, setHintIndex] = useState(null);

  const result = useMemo(() => calcWinner(board) || { winner: undefined }, [board]);
  const turn = xIsNext ? "X" : "O";

  useEffect(() => {
    setStartTs(Date.now());
  }, [mode, difficulty]);

  useEffect(() => {
    if (mode === "cpu" && !result?.winner && !result?.draw) {
      const ai = "O"; // AI plays O when vs CPU
      const human = "X";
      if (!xIsNext) {
        const idx = bestMove([...board], ai, human, difficulty);
        const t = setTimeout(() => handleMove(idx, false), 380);
        return () => clearTimeout(t);
      }
    }
  }, [board, xIsNext, mode, result, difficulty]);

  useEffect(() => {
    if (result?.winner || result?.draw) {
      const dur = Date.now() - startTs;
      setStats((s) => {
        let ns = { ...s, games: (s.games || 0) + 1 };
        if (result.draw) ns = { ...ns, draws: (ns.draws || 0) + 1, streak: 0 };
        else if (result.winner === "X") ns = { ...ns, xWins: (ns.xWins || 0) + 1, streak: (ns.streak || 0) + 1 };
        else if (result.winner === "O") ns = { ...ns, oWins: (ns.oWins || 0) + 1, streak: 0 };
        if (ns.bestTimeMs == null || dur < ns.bestTimeMs) ns.bestTimeMs = dur;
        return ns;
      });
      if (result.draw) chord([440, 440, 440], 0.15);
      else chord([523, 659, 783], 0.3);
    }
  }, [result]);

  const handleMove = (i, playSound = true) => {
    if (board[i] || result?.winner || result?.draw) return;
    const next = [...board];
    next[i] = xIsNext ? "X" : "O";
    setHistory((h) => [...h, board]);
    setBoard(next);
    setXIsNext(!xIsNext);
    if (playSound) beep(520);
  };

  const reset = () => {
    setBoard(Array(9).fill(null));
    setXIsNext(true);
    setHistory([]);
    setHintIndex(null);
    setStartTs(Date.now());
  };

  const undo = () => {
    if (history.length === 0 || result?.winner || result?.draw) return;
    const prev = history[history.length - 1];
    setHistory((h) => h.slice(0, -1));
    setBoard(prev);
    setXIsNext(!xIsNext);
    beep(300, 0.06, "square", 0.03);
  };

  const giveHint = () => {
    if (result?.winner || result?.draw) return;
    const ai = xIsNext ? "X" : "O";
    const human = xIsNext ? "O" : "X";
    const idx = bestMove([...board], ai, human, "impossible");
    setHintIndex(idx);
    beep(760, 0.05, "sawtooth", 0.03);
  };

  const switchTheme = (key) => setThemeKey({ theme: key });

  const prettyTime = (ms) => {
    if (ms == null) return "—";
    const s = Math.floor(ms / 1000);
    const m = Math.floor(s / 60);
    const rem = s % 60;
    return `${m}:${String(rem).padStart(2, "0")}`;
  };

  const achievements = useMemo(() => {
    return [
      { id: "firstWin", label: "First Win", unlocked: (stats.xWins + stats.oWins) > 0 },
      { id: "streak3", label: "Win Streak ×3", unlocked: stats.streak >= 3 },
      { id: "speedrun", label: "Sub-30s Win", unlocked: stats.bestTimeMs != null && stats.bestTimeMs < 30000 },
    ];
  }, [stats]);

  return (
    <div className={`min-h-screen relative overflow-hidden text-white`}>
      {/* Gradient BG */}
      <div className={`absolute inset-0 bg-gradient-to-br ${theme.bg}`} />

      {/* 3D Canvas */}
      <div className="absolute inset-0 opacity-40 pointer-events-none select-none">
        <SoftErrorBoundary>
          <Canvas camera={{ position: [0, 0, 5], fov: 60 }}>
            <ambientLight intensity={0.7} />
            <pointLight position={[5, 5, 5]} intensity={1.2} />
            <TorusKnot />
          </Canvas>
        </SoftErrorBoundary>
      </div>

      {/* Content Layer */}
      <div className="relative z-10 max-w-6xl mx-auto px-4 py-10">
        <motion.header initial={{ opacity: 0, y: -10 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.6 }} className="flex flex-col sm:flex-row gap-4 sm:items-end sm:justify-between mb-6">
          <div>
            <h1 className="text-3xl sm:text-5xl font-black tracking-tight">Tic-Tac-Toe <span className="bg-clip-text text-transparent bg-gradient-to-r from-white via-fuchsia-200 to-cyan-200">— Beyond the Grid</span></h1>
            <p className="text-white/70 mt-1">AI-powered • Multiplayer-ready design • 3D vibes • Masterpiece UI/UX</p>
          </div>

          <div className="flex flex-wrap gap-2 items-center">
            {/* Theme Picker */}
            <div className={`flex items-center gap-2 p-2 rounded-2xl border ${theme.card}`}>
              {Object.entries(THEMES).map(([k, v]) => (
                <button key={k} onClick={() => switchTheme(k)} className={`px-3 py-1 rounded-xl text-sm transition transform hover:-translate-y-0.5 ${themeKey.theme === k ? "bg-white/20" : "bg-white/5"}`} aria-label={`Switch to ${v.name} theme`}>
                  {v.name}
                </button>
              ))}
            </div>
          </div>
        </motion.header>

        <div className="grid lg:grid-cols-3 gap-6">
          {/* Left: Controls & Stats */}
          <motion.aside initial={{ opacity: 0, x: -12 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.2 }} className={`p-4 rounded-3xl border ${theme.card}`}>
            <h2 className="font-bold text-lg mb-3">Game Settings</h2>
            <div className="space-y-3">
              <div className="flex items-center justify-between gap-2">
                <label className="text-white/80">Mode</label>
                <div className="flex gap-2">
                  <button onClick={() => { setMode("cpu"); reset(); }} className={`px-3 py-1 rounded-xl ${mode === "cpu" ? "bg-white/20" : "bg-white/5"}`}>vs CPU</button>
                  <button onClick={() => { setMode("local"); reset(); }} className={`px-3 py-1 rounded-xl ${mode === "local" ? "bg-white/20" : "bg-white/5"}`}>Local 2P</button>
                </div>
              </div>
              {mode === "cpu" && (
                <div className="flex items-center justify-between gap-2">
                  <label className="text-white/80">Difficulty</label>
                  <select value={difficulty} onChange={(e) => { setDifficulty(e.target.value); reset(); }} className="bg-white/10 rounded-xl px-3 py-1">
                    <option value="easy">Easy</option>
                    <option value="medium">Medium</option>
                    <option value="impossible">Impossible</option>
                  </select>
                </div>
              )}
              <div className="flex gap-2">
                <button onClick={reset} className="px-3 py-2 rounded-xl bg-white/10 hover:bg-white/20 transition">Reset</button>
                <button onClick={undo} className="px-3 py-2 rounded-xl bg-white/10 hover:bg-white/20 transition">Undo</button>
                <button onClick={giveHint} className="px-3 py-2 rounded-xl bg-gradient-to-r from-amber-400 to-yellow-300 text-black font-semibold">Hint</button>
              </div>
            </div>

            <div className="h-px bg-white/10 my-4" />

            <h2 className="font-bold text-lg mb-3">Stats</h2>
            <ul className="grid grid-cols-2 gap-3 text-white/90">
              <li className="p-3 rounded-2xl bg-white/5">X Wins <div className="text-2xl font-black">{stats.xWins}</div></li>
              <li className="p-3 rounded-2xl bg-white/5">O Wins <div className="text-2xl font-black">{stats.oWins}</div></li>
              <li className="p-3 rounded-2xl bg-white/5">Draws <div className="text-2xl font-black">{stats.draws}</div></li>
              <li className="p-3 rounded-2xl bg-white/5">Best Time <div className="text-xl font-black">{prettyTime(stats.bestTimeMs)}</div></li>
            </ul>

            <div className="h-px bg-white/10 my-4" />

            <h2 className="font-bold text-lg mb-2">Achievements</h2>
            <div className="flex flex-wrap gap-2">
              {achievements.map((a) => (
                <span key={a.id} className={`px-3 py-1 rounded-full text-sm ${a.unlocked ? "bg-green-400 text-black" : "bg-white/10 text-white/70"}`}>{a.label}</span>
              ))}
            </div>
          </motion.aside>

          {/* Center: Board */}
          <motion.main initial={{ opacity: 0, scale: 0.98 }} animate={{ opacity: 1, scale: 1 }} transition={{ delay: 0.25 }} className={`lg:col-span-2 p-4 rounded-3xl border ${theme.card}`}>
            <div className="flex items-center justify-between mb-4">
              <div className="text-white/80">Turn</div>
              <div className="text-3xl font-black bg-clip-text text-transparent bg-gradient-to-r from-white to-zinc-300">{turn}</div>
              <div className="text-white/70">{mode === "cpu" ? `Difficulty: ${difficulty}` : "Local Match"}</div>
            </div>

            <div className="grid grid-cols-3 gap-3 sm:gap-4 max-w-md mx-auto">
              {board.map((cell, i) => {
                const isWinning = result?.line?.includes(i);
                const isHint = hintIndex === i && !cell && !result?.winner && !result?.draw;
                return (
                  <motion.button
                    key={i}
                    onClick={() => handleMove(i)}
                    disabled={!!cell || !!result?.winner || !!result?.draw || (mode === "cpu" && !xIsNext)}
                    whileTap={{ scale: 0.94 }}
                    className={`relative aspect-square rounded-2xl border border-white/10 bg-white/5 hover:bg-white/10 focus:outline-none focus:ring-2 focus:ring-white/40 transition grid place-items-center text-4xl sm:text-6xl font-black select-none ${isWinning ? "ring-2 ring-emerald-300" : ""}`}
                    aria-label={`Cell ${i + 1}`}
                  >
                    <AnimatePresence>
                      {cell && (
                        <motion.span initial={{ scale: 0.4, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} exit={{ scale: 0.4, opacity: 0 }} transition={{ type: "spring", stiffness: 300, damping: 18 }} className={`bg-clip-text text-transparent bg-gradient-to-br ${theme.accent}`}>
                          {cell}
                        </motion.span>
                      )}
                    </AnimatePresence>
                    {isHint && (
                      <span className="absolute inset-0 rounded-2xl ring-2 ring-yellow-300 animate-pulse" />
                    )}
                  </motion.button>
                );
              })}
            </div>

            {/* Result Banner */}
            <AnimatePresence>
              {(result?.winner || result?.draw) && (
                <motion.div initial={{ opacity: 0, y: 12 }} animate={{ opacity: 1, y: 0 }} exit={{ opacity: 0, y: 12 }} className="mt-6 text-center">
                  <div className="inline-flex items-center gap-3 px-5 py-3 rounded-2xl bg-white/10 border border-white/10">
                    <span className="text-xl">{result.draw ? "It’s a draw!" : `${result.winner} wins!`}</span>
                    <button onClick={reset} className="px-3 py-1 rounded-xl bg-gradient-to-r from-lime-300 to-emerald-300 text-black font-semibold">Play Again</button>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.main>
        </div>

        <footer className="mt-8 text-center text-white/60">
          <p>GDG on Campus – MIT Muzaffarpur • Project of the Month – August • Crafted with React, Tailwind, Framer Motion, and Three.js</p>
        </footer>
      </div>

      {/* Decorative halo */}
      <div className="pointer-events-none absolute -top-24 left-1/2 -translate-x-1/2 w-[60rem] h-[60rem] rounded-full bg-gradient-to-tr from-white/10 to-transparent blur-3xl" />
    </div>
  );
}
